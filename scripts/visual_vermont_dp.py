import os
import sys
import time
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import argparse
from scipy import linalg
from scipy.special import logsumexp
from myvil import diff_seed_noise_torch
from myvil import diff_seed_noise
import torch
from matplotlib.ticker import FormatStrFormatter
import matplotlib.gridspec as gridspec

torch.cuda.set_device(3)

def cal_avg_var_median(data_list):
    data_list = np.array(data_list)
    avg = np.average(data_list, axis=0)
    var = np.var(data_list, axis=0)
    median = np.median(data_list, axis=0)
    return avg, var, median

#####################0. data preparation#####################
domain = "vermont"
method = ""
print("domain: ", domain)
print("method: ", method)
data_dict = {}
data_dict[90] = {}
data_dict[90]["DPSyn"] = {
    "means": [[-1.47868189, -1.46553951, -1.38494103, -1.39757008, -1.49559074,
       -1.40815148, -1.30923944, -1.40562679, -1.39199066, -1.39479364], [-1.51204871, -1.42201184, -1.40405837, -1.43558001, -1.50765073,
       -1.40468617, -1.36765069, -1.41176575, -1.45548162, -1.40378544], [-1.52289893, -1.46540757, -1.43314345, -1.46131828, -1.51636099,
       -1.42946422, -1.39879891, -1.44094781, -1.47355205, -1.44054637]],
    "covs": [[-3.2865483 , -3.26975456, -3.14012789, -3.11731928, -3.26800605,
       -3.11443936, -2.95806101, -3.10035734, -3.10794663, -3.1850344 ], [-3.30808689, -3.19340925, -3.09344158, -3.14443553, -3.28781598,
       -3.13175081, -2.98430884, -3.02760688, -3.18096256, -3.10267269], [-3.31523723, -3.23506441, -3.1487078 , -3.21263973, -3.29023356,
       -3.14240851, -3.06085318, -3.13838956, -3.24922482, -3.11444388]],
}
data_dict[90]["PrivBayes"] = {
    "means": [[-1.46945044, -1.47460916, -1.42127955, -1.39485825, -1.48277005,
       -1.38974005, -1.35396687, -1.41299248, -1.39229062, -1.3895203 ], [-1.51409563, -1.51800052, -1.4429964 , -1.41582506, -1.53291553,
       -1.44395254, -1.3904387 , -1.43783046, -1.42598334, -1.47025985], [-1.52068369, -1.45489572, -1.40750474, -1.41873667, -1.52520112,
       -1.44325164, -1.40615487, -1.43499188, -1.44192474, -1.40364509]],
    "covs": [[-3.17287812, -3.19604958, -3.15420857, -3.07131679, -3.15838715,
       -2.993871  , -2.92117218, -3.05043098, -3.10408243, -3.05705697], [-3.1784389 , -3.19497879, -3.08509791, -3.06355439, -3.16286198,
       -3.02046147, -3.00245398, -3.00383675, -3.08646457, -3.12980598], [-3.23315225, -3.11882804, -3.05784561, -3.07706814, -3.21061686,
       -3.02375364, -2.98755227, -3.01127159, -3.12177073, -3.07072438]],
}
data_dict[90]["rmckenna"] = {
    "means": [[-1.54595808, -1.46189367, -1.45408372, -1.45139565, -1.5453284 ,
       -1.47097837, -1.42341771, -1.45974417, -1.50871885, -1.42224764], [-1.5800663 , -1.49679677, -1.47761195, -1.46856633, -1.58387609,
       -1.45900778, -1.45342613, -1.4662099 , -1.53454349, -1.45706637], [-1.59985442, -1.4657958 , -1.50451328, -1.50841808, -1.58597028,
       -1.43730597, -1.45198493, -1.48028011, -1.5452484 , -1.42267789]],
    "covs": [[-3.3385736 , -3.0972826 , -3.22504546, -3.17534279, -3.30863457,
       -3.19704027, -3.07122696, -3.07789774, -3.23109513, -3.12905067], [-3.35395601, -3.17874462, -3.22561388, -3.1806573 , -3.3203671 ,
       -3.10883608, -3.1122575 , -3.06825979, -3.23984716, -3.11841287], [-3.35674988, -3.17035111, -3.23958534, -3.20629591, -3.32193036,
       -3.16656448, -3.14758439, -3.07971239, -3.22581994, -3.14333992]],
}

data_dict[50] = {}
data_dict[50]["DPSyn"] = {
    "means": [[-1.42884867, -1.37783603, -1.26201225, -1.44943811, -1.33434592,
       -1.25783055, -1.28471977, -1.3305174 , -1.2635994 , -1.32186548], [-1.33979505, -1.441315  , -1.38568978, -1.32958427, -1.29169426,
       -1.38882425, -1.39695065, -1.3603236 , -1.36272492, -1.27195055], [-1.4173541 , -1.3639187 , -1.43738547, -1.35608577, -1.42529396,
       -1.41176379, -1.39283532, -1.33786485, -1.36767323, -1.29166698]],
    "covs": [[-2.84504886, -2.80546898, -2.62230637, -2.84097394, -2.68819203,
       -2.69037197, -2.67570439, -2.68319302, -2.66141859, -2.7015406 ], [-2.80390217, -2.8275169 , -2.84883614, -2.71373472, -2.75518974,
       -2.87193241, -2.76707734, -2.80049259, -2.87016252, -2.71781013], [-2.80676728, -2.81938431, -2.87313294, -2.80693204, -2.74747633,
       -2.86228045, -2.77439517, -2.73882464, -2.79702953, -2.71727393]],
}
data_dict[50]["PrivBayes"] = {
    "means": [[-1.39697168, -1.3990491 , -1.41955208, -1.44922046, -1.30807577,
       -1.38774456, -1.26219816, -1.40713687, -1.40656344, -1.35746597], [-1.38695031, -1.39680406, -1.3002169 , -1.42952395, -1.27962733,
       -1.36517694, -1.27678007, -1.32564199, -1.30508172, -1.35040074], [-1.44903524, -1.44934708, -1.31900187, -1.49932221, -1.36709831,
       -1.42193061, -1.32885359, -1.31414437, -1.27039694, -1.33471597]],
    "covs": [[-2.86429965, -2.80328609, -2.82809044, -2.83376143, -2.73769219,
       -2.87326514, -2.71021312, -2.86342425, -2.8571604 , -2.71669634], [-2.86258836, -2.80556381, -2.69019951, -2.8357414 , -2.71468106,
       -2.87189438, -2.7258324 , -2.74541915, -2.72883974, -2.71047293], [-2.87511046, -2.85251383, -2.61765702, -2.87302099, -2.77682749,
       -2.87529182, -2.76275574, -2.70074299, -2.71777834, -2.65739741]],
}
data_dict[50]["rmckenna"] = {
    "means": [[-1.44223372, -1.5170612 , -1.27561694, -1.42789088, -1.40787826,
       -1.26876809, -1.33922476, -1.36296485, -1.2822746 , -1.26644364], [-1.43924548, -1.54177327, -1.31927345, -1.47261607, -1.45871238,
       -1.32871484, -1.38456844, -1.34351506, -1.3243634 , -1.31173026], [-1.30671292, -1.46189513, -1.29810153, -1.4573868 , -1.40173632,
       -1.4123171 , -1.38484889, -1.36982228, -1.30873325, -1.3385983 ]],
    "covs": [[-2.96878358, -2.91637483, -2.66908731, -2.93870396, -2.80532074,
       -2.74818824, -2.76301913, -2.82446832, -2.71396769, -2.73265844], [-2.96620421, -2.91522307, -2.69661198, -2.94709527, -2.75164904,
       -2.77425708, -2.81702712, -2.73130543, -2.72144017, -2.74003354], [-2.72221818, -2.90744024, -2.73282188, -2.95677822, -2.73131585,
       -2.95183843, -2.83614787, -2.82432214, -2.77606481, -2.79079734]],
}

data_dict[20] = {}
data_dict[20]["DPSyn"] = {
    "means": [[-1.21537435, -1.22342999, -1.19211346, -1.21659819, -1.25084763,
       -1.19823687, -1.21675096, -1.19969599, -1.23796802, -1.19681253], [-1.21998892, -1.22948462, -1.228469  , -1.19006754, -1.25987477,
       -1.32400463, -1.17337399, -1.21046588, -1.24319028, -1.1941529 ], [-1.27859359, -1.29668019, -1.22324872, -1.27745648, -1.28947464,
       -1.25154084, -1.2532168 , -1.26343631, -1.2465266 , -1.21638724]],
    "covs": [[-2.58319359, -2.58183209, -2.56170928, -2.57426341, -2.59207797,
       -2.57904954, -2.54552237, -2.56915954, -2.58638315, -2.57185734], [-2.62606505, -2.58557663, -2.58984151, -2.60933507, -2.57112451,
       -2.59439548, -2.54025354, -2.57187079, -2.62460721, -2.57378344], [-2.68289422, -2.63321025, -2.640065  , -2.66008576, -2.66621103,
       -2.59503513, -2.60387509, -2.63140951, -2.6356067 , -2.62720961]],
}
data_dict[20]["PrivBayes"] = {
    "means": [[-1.20182604, -1.2091949 , -1.16899559, -1.20637185, -1.21336541,
       -1.22135497, -1.18225509, -1.14254035, -1.24695887, -1.17482251], [-1.17063601, -1.22097865, -1.19642695, -1.24836093, -1.21040139,
       -1.29846023, -1.1915245 , -1.20378852, -1.2085495 , -1.19616986], [-1.30470296, -1.32555716, -1.2082407 , -1.27157093, -1.28031158,
       -1.30868777, -1.28249556, -1.25168373, -1.35226585, -1.32461654]],
    "covs": [[-2.64483532, -2.56827775, -2.5708672 , -2.62693198, -2.57474721,
       -2.55361928, -2.5680554 , -2.60050809, -2.65445259, -2.61300578], [-2.5465639 , -2.55843014, -2.61211685, -2.57703187, -2.54549974,
       -2.5716071 , -2.5719355 , -2.61705867, -2.58747929, -2.57716325], [-2.4850903 , -2.52020519, -2.58346271, -2.56361691, -2.54107114,
       -2.55756341, -2.56136824, -2.57559764, -2.58788277, -2.55808   ]],
}
data_dict[20]["rmckenna"] = {
    "means": [[-1.46323654, -1.42194913, -1.39736552, -1.40622525, -1.40494853,
       -1.41549987, -1.45585399, -1.35746312, -1.37437055, -1.39553959], [-1.45913894, -1.400704  , -1.41506184, -1.41235273, -1.41819362,
       -1.4174668 , -1.4155159 , -1.36509727, -1.3918251 , -1.4122613 ], [-1.50295988, -1.48610709, -1.43446446, -1.45584935, -1.45023397,
       -1.45979788, -1.44812993, -1.44649531, -1.41758613, -1.44416719]],
    "covs": [[-2.88686355, -2.82736939, -2.83491438, -2.81012732, -2.81049663,
       -2.8086789 , -2.82289883, -2.79487482, -2.79527286, -2.83952188], [-2.90959624, -2.83866445, -2.85184414, -2.82972971, -2.82814217,
       -2.8388014 , -2.82783971, -2.82173219, -2.83429982, -2.8665737 ], [-2.95206642, -2.91592269, -2.8780116 , -2.87134761, -2.87144122,
       -2.8728989 , -2.87341998, -2.88072298, -2.86078536, -2.90114814]],
}
#####################0. data preparation#####################


#####################1. Set parameters#####################
cvgs = [20, 50, 90]
n_components = 50
init_param = "kmeans"
dp_methods = ["rmckenna", "DPSyn", "PrivBayes"]
dp_budgets = ["0.3", "1.0", "8.0"]
dp_number = 1
#####################1. Set parameters#####################

name = domain+"_"+method if method != "" else domain
graph_dir = f"../result/{name}/259pca/noise/whole/graph/"
if not os.path.exists(graph_dir):
    os.makedirs(graph_dir)

#plot
x_labels = [float(x) for x in dp_budgets]
print("x_labels: ", x_labels)
fontsize = 10
medianprops = dict(linestyle='-.', linewidth=2.5, color='firebrick')
meanpointprops = dict(marker='D', markeredgecolor='black',
                    markerfacecolor='blue')
mean_legend = plt.Line2D([0], [0], marker='D', markeredgecolor='black',
                    markerfacecolor='blue', label='average (of 10 seeds)')
median_legend = plt.Line2D([0], [0], linestyle='-.', linewidth=2.5, color='firebrick', label='median (of 10 seeds)')
width = 14
height = 4.5
plt.figure(figsize=(width, height))
gs = gridspec.GridSpec(2, len(cvgs) * len(dp_methods))
for l,metric in enumerate(["means", "covs"]):
    print("\n\nmetric: ", metric)
    for k, cvg in enumerate(cvgs):
        for i,dp_method in enumerate(dp_methods):
            data = data_dict[cvg][dp_method][metric]
            for j,dp_budget in enumerate(dp_budgets):
                avg, _, median = cal_avg_var_median(data[j])
                print("{} {} avg: {:.4f}".format(dp_method, dp_budget, avg))
                print("{} {} median: {:.4f}".format(dp_method, dp_budget, median))
            ax = plt.subplot(gs[l, k * len(dp_methods) + i])
            x_ticks = np.arange(1, len(x_labels)+1)
            ax.boxplot(
                data,
                labels=[str(x) for x in x_ticks],
                showfliers=False,
                meanprops=meanpointprops, 
                meanline=False,
                showmeans=True,
                medianprops=medianprops
                )
            ax.set_xticks(x_ticks, [str(x) for x in x_labels])
            if metric == "means":
                ax.set_ylim([-1.55, -1.10])
            else:
                ax.set_ylim([-3.5, -2.5])
            ax.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))
            title = f"{dp_method} (d={cvg})" if cvg != 90 else f"{dp_method} (d=141)"
            ax.set_title(title, fontsize=fontsize)
            plt.xlabel('Buget', fontsize=fontsize)
            if k*3+i == 0:
                plt.ylabel(f"log10({metric} change)", fontsize=fontsize)
plt.subplots_adjust(top=0.85, bottom=0.1, left=0.05, right=0.95, hspace=0.6, wspace=0.6)
# plt.legend(handles=[mean_legend, median_legend], loc='lower center', bbox_to_anchor=(0.5, 1.02), ncol=len(dp_methods), borderaxespad=0.)

fig = plt.gcf()
# fig.tight_layout(pad=2)
# # fig.subplots_adjust(top=0.8)
fig.legend(loc='upper center', bbox_to_anchor=(0.5, 1.0), 
            ncol=len(dp_methods), handles=[mean_legend, median_legend])
plt.savefig(f"{graph_dir}kmeans.png")
plt.clf()



